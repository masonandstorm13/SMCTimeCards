/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui.WorkOrderGui;

import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import Objects.Matterial;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;

/**
 *
 * @author Mason Smith
 */
@SuppressWarnings("serial")
public class MatterialMenu extends javax.swing.JFrame {

	/*
	 * to do 
	 * populate the data set for JTable from material list
	 */
	
	private int part;
	private List<Matterial> matterialList = new ArrayList<Matterial>();
	private String[] columnNames = {
			"Description",
			"Cost",
			"Charge",
			"Part"
	};
	private Object[][] o = new Object[0][0];
    /**
     * Creates new form MatterialMenu
     */
	public MatterialMenu(int part) {
    	this.part = part;
    	
    	//sets up table and objects
    	for(int i = 0; i <= workOrderRun.totalParts; i++) {
    		if(!workOrderRun.workOrderSuper.getWorkOrderList().get(i).matterials.isEmpty()) {
    			for(Matterial matterial : workOrderRun.workOrderSuper.getWorkOrderList().get(i).getMatterialls()) {
    				matterialList.add(matterial);
    			}
    		}
    	}

        initComponents();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	//sets the location of frame to middle of screen
    	GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
    	this.setLocation(gd.getDisplayMode().getWidth()/4-this.getSize().width/2, gd.getDisplayMode().getHeight()/4-this.getSize().height/2);
    	
    	
        table = new JTable(o, columnNames);
        table.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 24));
        table.setRowHeight(50);
        table.getColumnModel().getColumn(0).setPreferredWidth(600);
        setUpTable();
        
        jPanel1 = new javax.swing.JPanel();
        ScrollPaneMatterialList = new javax.swing.JScrollPane(table);
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MatterialMenu");
        setMinimumSize(new java.awt.Dimension(960, 560));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setBackground(new java.awt.Color(240, 240, 240));
        jPanel1.setMinimumSize(new java.awt.Dimension(960, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(960, 400));
        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.X_AXIS));

        ScrollPaneMatterialList.setMinimumSize(new java.awt.Dimension(960, 400));
        ScrollPaneMatterialList.setPreferredSize(new java.awt.Dimension(960, 400));
        jPanel1.add(ScrollPaneMatterialList);

        getContentPane().add(jPanel1);
        
        jPanel2.setBackground(new java.awt.Color(240, 240, 240));
        jPanel2.setMinimumSize(new java.awt.Dimension(960, 160));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 160));
        jPanel2.setLayout(new java.awt.GridLayout(0, 1));
        
        JButton ButtonRemoveMatterial = new JButton("Remove Matterial");
        ButtonRemoveMatterial.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		//removes material from both and then re sets the table
        		if(table.getSelectedRow() != -1) {
        			workOrderRun.workOrderSuper.getWorkOrderList().get(matterialList.get(table.getSelectedRow()).getPart()).matterials.remove(matterialList.get(table.getSelectedRow()));  
        			matterialList.remove(table.getSelectedRow());
    	        	setUpTable();
        		}
        	}
        });
        ButtonRemoveMatterial.setSize(250, 125);
        
        getContentPane().add(jPanel2);
        jPanel2.setLayout(new GridLayout());
        jPanel2.add(ButtonRemoveMatterial);
        
        ButtonNewMatterial = new JButton("New Matterial");
        ButtonNewMatterial.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		Matterial matterial = new Matterial();
        			
        		//sets up option pane for single part work orders
        		JTextField description = new JTextField();
        		JTextField cost = new JFormattedTextField(NumberFormat.getNumberInstance());
        		cost.setText("0.00");
        		JTextField charge = new JFormattedTextField(NumberFormat.getNumberInstance());
        		charge.setText("0.00");
        		
        		//sets up combo box
        		Vector<String> letterPart = new Vector<String>();
        		for(int i = 0; i <= workOrderRun.totalParts; i++) {
        			letterPart.add(workOrderRun.alphabet[i]);
        		}
        		JComboBox<String> selectedPart = new JComboBox<String>(letterPart);
        		
        		Object[] message = {
        		    "Description:", description,
        		    "Cost:", cost,
        		    "Charge:", charge,
        		    "Part:", selectedPart
        		};

        			int option = JOptionPane.showConfirmDialog(null, message, "Add Matterial", JOptionPane.OK_CANCEL_OPTION);
        			if (option == JOptionPane.OK_OPTION) {
        				if (!description.getText().replaceAll(" ", "").equals("")) {
        			        matterial.setDescription(description.getText());
        			        matterial.setCost(Double.valueOf(cost.getText()));
        			        matterial.setCharge(Double.valueOf(charge.getText()));
        			        matterial.setPart(selectedPart.getSelectedIndex());
        			        
        			        workOrderRun.workOrderSuper.getWorkOrderList().get(selectedPart.getSelectedIndex()).addMatterial(matterial);
        			        System.out.println(workOrderRun.workOrderSuper.getWorkOrderList().get(selectedPart.getSelectedIndex()).matterials.size());
    			        	matterialList.add(matterial);
    			        	setUpTable();
        			    } else {
        			    	Object[] options = {"OK"};
                			JOptionPane.showOptionDialog(null, "Description Required \nPlease Retry", "error", JOptionPane.PLAIN_MESSAGE, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        			    }
        			} else {
        			    
        			}
        	}        	
        });
        jPanel2.add(ButtonNewMatterial);
        
        btnEditMatterial = new JButton("Edit Matterial");
        btnEditMatterial.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		if(!table.getSelectionModel().isSelectionEmpty()) {
        			//sets up a new material based of selected index
        			Matterial selectedMatterial = new Matterial();
        			selectedMatterial = matterialList.get(table.getSelectedRow());
        			
        			//sets up option pane for single part work orders
            		JTextField description = new JTextField();
            		description.setText(selectedMatterial.getDescription());
            		JTextField cost = new JFormattedTextField(NumberFormat.getNumberInstance());
            		cost.setText("0.00");
            		JTextField charge = new JFormattedTextField(NumberFormat.getNumberInstance());
            		charge.setText("0.00");
            		
            		//sets up combo box
            		Vector<String> letterPart = new Vector<String>();
            		for(int i = 0; i <= workOrderRun.totalParts; i++) {
            			letterPart.add(workOrderRun.alphabet[i]);
            		}
            		JComboBox<String> selectedPart = new JComboBox<String>(letterPart);
            		selectedPart.setSelectedIndex(selectedMatterial.getPart());
            		
            		Object[] message = {
            		    "Description:", description,
            		    "Cost:", cost,
            		    "Charge:", charge,
            		    "Part:", selectedPart
            		};
            			//sets up option pane for editing material
            			int option = JOptionPane.showConfirmDialog(null, message, "Add Matterial", JOptionPane.OK_CANCEL_OPTION);
            			if (option == JOptionPane.OK_OPTION) {
            				if (!description.getText().replaceAll(" ", "").equals("")) {
            					Matterial newMatterial = new Matterial();
            					newMatterial.setDescription(description.getText());
            					newMatterial.setCost(Double.valueOf(cost.getText()));
            					newMatterial.setCharge(Double.valueOf(charge.getText()));      
            					newMatterial.setPart(selectedPart.getSelectedIndex());
            					
            					//if the part is changed
            					if(newMatterial.getPart() != selectedMatterial.getPart()) {
            						//removes old material from workorder and adds new material to work order
            						workOrderRun.workOrderSuper.getWorkOrderList().get(selectedMatterial.getPart()).removeMatterial(selectedMatterial);
            						workOrderRun.workOrderSuper.getWorkOrderList().get(newMatterial.getPart()).addMatterial(newMatterial);
            					}else {
            						//finds material in array and sets the value 
                					workOrderRun.workOrderSuper.getWorkOrderList().get(selectedMatterial.getPart()).replaceMatterial(selectedMatterial, newMatterial);  
            					}
            					matterialList.set(matterialList.indexOf(selectedMatterial), newMatterial);
            			        setUpTable();
            			        
            			    } else {
            			    	Object[] options = {"OK"};
                    			JOptionPane.showOptionDialog(null, "Description Required \nPlease Retry", "error", JOptionPane.PLAIN_MESSAGE, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            			    }
            			} else {
            			    
            			}
        		}else {
        			
        		}
        	}
        });
        jPanel2.add(btnEditMatterial);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setUpTable() {   	
    	DefaultTableModel model;
    	
    	//sets up the table options
    	if(matterialList.size() != 0) {
    		o = new Object[matterialList.size()][5];
        	
        	for(int i = 0; i < matterialList.size(); i++) {
        		for(int f = 0; f < 4; f++) {
        			if(f == 0) {
        				o[i][f] = matterialList.get(i).getDescription();
        			}else if(f == 1) {
        				o[i][f] = matterialList.get(i).getCost();
        			}else if(f == 2) {
        				o[i][f] = matterialList.get(i).getCharge();
        			}else if(f == 3) {
        				o[i][f] = workOrderRun.alphabet[matterialList.get(i).getPart()];
        			}
        		}
        	} 
        	model = new DefaultTableModel(o, columnNames);
    	}else {
    		model = new DefaultTableModel();
    	}
    	table.setModel(model);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneMatterialList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private JButton ButtonNewMatterial;
    private JButton btnEditMatterial;
	private JTable table;
}
